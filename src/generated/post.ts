// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: post.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SUser } from "./shared_message";

export const protobufPackage = "post";

export interface Post {
  id: string;
  access: string;
  content: string;
  image: string;
  /** quan hệ user -> post (nhiều post thuộc 1 user) */
  user:
    | SUser
    | undefined;
  /** user đã like bài viết */
  likedBy: SUser[];
  likeCount: number;
  commentCount: number;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export const POST_PACKAGE_NAME = "post";

function createBasePost(): Post {
  return {
    id: "",
    access: "",
    content: "",
    image: "",
    user: undefined,
    likedBy: [],
    likeCount: 0,
    commentCount: 0,
    createdAt: "",
    updatedAt: "",
    deletedAt: "",
  };
}

export const Post: MessageFns<Post> = {
  encode(message: Post, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.access !== "") {
      writer.uint32(18).string(message.access);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.user !== undefined) {
      SUser.encode(message.user, writer.uint32(42).fork()).join();
    }
    for (const v of message.likedBy) {
      SUser.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.likeCount !== 0) {
      writer.uint32(56).int32(message.likeCount);
    }
    if (message.commentCount !== 0) {
      writer.uint32(64).int32(message.commentCount);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(82).string(message.updatedAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(90).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Post {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.user = SUser.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.likedBy.push(SUser.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.likeCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.commentCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
