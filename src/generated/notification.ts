// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: notification.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { NotificationType } from "./notification_enum";

export const protobufPackage = "notification";

export interface Notification {
  id: string;
  postId: string;
  creatorId: string;
  creatorAvtUrl: string;
  receiverId: string;
  notifType: NotificationType;
  message: string;
  isRead: boolean;
  createdAt: string;
  deletedAt: string;
}

export interface GetNotificationsRequest {
  userId: string;
}

export interface GetNotificationsResponse {
  notifications: Notification[];
}

export interface CreateNotificationRequest {
  postId: string;
  creatorId: string;
  creatorAvtUrl: string;
  receiverId: string;
  notifType: NotificationType;
  message: string;
}

export interface CreateNotificationResponse {
  notifications: Notification | undefined;
}

export interface DeleteNotificationsRequest {
  id: string;
}

export interface DeleteNotificationsResponse {
  notifications: Notification | undefined;
}

export interface MarkAsReadNotificationRequest {
  id: string;
}

export interface MarkAsReadotificationResponse {
  notification: Notification | undefined;
}

export interface MarkAsReadNotificationsRequest {
  ids: string[];
}

export interface MarkAsReadotificationsResponse {
  notifications: Notification[];
}

export const NOTIFICATION_PACKAGE_NAME = "notification";

function createBaseNotification(): Notification {
  return {
    id: "",
    postId: "",
    creatorId: "",
    creatorAvtUrl: "",
    receiverId: "",
    notifType: 0,
    message: "",
    isRead: false,
    createdAt: "",
    deletedAt: "",
  };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.postId !== "") {
      writer.uint32(18).string(message.postId);
    }
    if (message.creatorId !== "") {
      writer.uint32(26).string(message.creatorId);
    }
    if (message.creatorAvtUrl !== "") {
      writer.uint32(34).string(message.creatorAvtUrl);
    }
    if (message.receiverId !== "") {
      writer.uint32(42).string(message.receiverId);
    }
    if (message.notifType !== 0) {
      writer.uint32(48).int32(message.notifType);
    }
    if (message.message !== "") {
      writer.uint32(58).string(message.message);
    }
    if (message.isRead !== false) {
      writer.uint32(64).bool(message.isRead);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(82).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creatorId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.creatorAvtUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.receiverId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.notifType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isRead = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetNotificationsRequest(): GetNotificationsRequest {
  return { userId: "" };
}

export const GetNotificationsRequest: MessageFns<GetNotificationsRequest> = {
  encode(message: GetNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetNotificationsResponse(): GetNotificationsResponse {
  return { notifications: [] };
}

export const GetNotificationsResponse: MessageFns<GetNotificationsResponse> = {
  encode(message: GetNotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateNotificationRequest(): CreateNotificationRequest {
  return { postId: "", creatorId: "", creatorAvtUrl: "", receiverId: "", notifType: 0, message: "" };
}

export const CreateNotificationRequest: MessageFns<CreateNotificationRequest> = {
  encode(message: CreateNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postId !== "") {
      writer.uint32(18).string(message.postId);
    }
    if (message.creatorId !== "") {
      writer.uint32(26).string(message.creatorId);
    }
    if (message.creatorAvtUrl !== "") {
      writer.uint32(34).string(message.creatorAvtUrl);
    }
    if (message.receiverId !== "") {
      writer.uint32(42).string(message.receiverId);
    }
    if (message.notifType !== 0) {
      writer.uint32(48).int32(message.notifType);
    }
    if (message.message !== "") {
      writer.uint32(58).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creatorId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.creatorAvtUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.receiverId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.notifType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateNotificationResponse(): CreateNotificationResponse {
  return { notifications: undefined };
}

export const CreateNotificationResponse: MessageFns<CreateNotificationResponse> = {
  encode(message: CreateNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notifications !== undefined) {
      Notification.encode(message.notifications, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications = Notification.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteNotificationsRequest(): DeleteNotificationsRequest {
  return { id: "" };
}

export const DeleteNotificationsRequest: MessageFns<DeleteNotificationsRequest> = {
  encode(message: DeleteNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteNotificationsResponse(): DeleteNotificationsResponse {
  return { notifications: undefined };
}

export const DeleteNotificationsResponse: MessageFns<DeleteNotificationsResponse> = {
  encode(message: DeleteNotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notifications !== undefined) {
      Notification.encode(message.notifications, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteNotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications = Notification.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMarkAsReadNotificationRequest(): MarkAsReadNotificationRequest {
  return { id: "" };
}

export const MarkAsReadNotificationRequest: MessageFns<MarkAsReadNotificationRequest> = {
  encode(message: MarkAsReadNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMarkAsReadotificationResponse(): MarkAsReadotificationResponse {
  return { notification: undefined };
}

export const MarkAsReadotificationResponse: MessageFns<MarkAsReadotificationResponse> = {
  encode(message: MarkAsReadotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notification !== undefined) {
      Notification.encode(message.notification, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notification = Notification.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMarkAsReadNotificationsRequest(): MarkAsReadNotificationsRequest {
  return { ids: [] };
}

export const MarkAsReadNotificationsRequest: MessageFns<MarkAsReadNotificationsRequest> = {
  encode(message: MarkAsReadNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMarkAsReadotificationsResponse(): MarkAsReadotificationsResponse {
  return { notifications: [] };
}

export const MarkAsReadotificationsResponse: MessageFns<MarkAsReadotificationsResponse> = {
  encode(message: MarkAsReadotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface NotificationServiceClient {
  getNotifications(request: GetNotificationsRequest): Observable<GetNotificationsResponse>;

  createNotification(request: CreateNotificationRequest): Observable<CreateNotificationResponse>;

  deleteNotification(request: DeleteNotificationsRequest): Observable<DeleteNotificationsResponse>;

  markAsReadNotification(request: MarkAsReadNotificationRequest): Observable<MarkAsReadotificationResponse>;

  markAsReadNotifications(request: MarkAsReadNotificationsRequest): Observable<MarkAsReadotificationsResponse>;
}

export interface NotificationServiceController {
  getNotifications(
    request: GetNotificationsRequest,
  ): Promise<GetNotificationsResponse> | Observable<GetNotificationsResponse> | GetNotificationsResponse;

  createNotification(
    request: CreateNotificationRequest,
  ): Promise<CreateNotificationResponse> | Observable<CreateNotificationResponse> | CreateNotificationResponse;

  deleteNotification(
    request: DeleteNotificationsRequest,
  ): Promise<DeleteNotificationsResponse> | Observable<DeleteNotificationsResponse> | DeleteNotificationsResponse;

  markAsReadNotification(
    request: MarkAsReadNotificationRequest,
  ): Promise<MarkAsReadotificationResponse> | Observable<MarkAsReadotificationResponse> | MarkAsReadotificationResponse;

  markAsReadNotifications(
    request: MarkAsReadNotificationsRequest,
  ):
    | Promise<MarkAsReadotificationsResponse>
    | Observable<MarkAsReadotificationsResponse>
    | MarkAsReadotificationsResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getNotifications",
      "createNotification",
      "deleteNotification",
      "markAsReadNotification",
      "markAsReadNotifications",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";

export type NotificationServiceService = typeof NotificationServiceService;
export const NotificationServiceService = {
  getNotifications: {
    path: "/notification.NotificationService/GetNotifications",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetNotificationsRequest): Buffer =>
      Buffer.from(GetNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetNotificationsRequest => GetNotificationsRequest.decode(value),
    responseSerialize: (value: GetNotificationsResponse): Buffer =>
      Buffer.from(GetNotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetNotificationsResponse => GetNotificationsResponse.decode(value),
  },
  createNotification: {
    path: "/notification.NotificationService/CreateNotification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateNotificationRequest): Buffer =>
      Buffer.from(CreateNotificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateNotificationRequest => CreateNotificationRequest.decode(value),
    responseSerialize: (value: CreateNotificationResponse): Buffer =>
      Buffer.from(CreateNotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateNotificationResponse => CreateNotificationResponse.decode(value),
  },
  deleteNotification: {
    path: "/notification.NotificationService/DeleteNotification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteNotificationsRequest): Buffer =>
      Buffer.from(DeleteNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteNotificationsRequest => DeleteNotificationsRequest.decode(value),
    responseSerialize: (value: DeleteNotificationsResponse): Buffer =>
      Buffer.from(DeleteNotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteNotificationsResponse => DeleteNotificationsResponse.decode(value),
  },
  markAsReadNotification: {
    path: "/notification.NotificationService/MarkAsReadNotification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkAsReadNotificationRequest): Buffer =>
      Buffer.from(MarkAsReadNotificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MarkAsReadNotificationRequest => MarkAsReadNotificationRequest.decode(value),
    responseSerialize: (value: MarkAsReadotificationResponse): Buffer =>
      Buffer.from(MarkAsReadotificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MarkAsReadotificationResponse => MarkAsReadotificationResponse.decode(value),
  },
  markAsReadNotifications: {
    path: "/notification.NotificationService/MarkAsReadNotifications",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkAsReadNotificationsRequest): Buffer =>
      Buffer.from(MarkAsReadNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MarkAsReadNotificationsRequest => MarkAsReadNotificationsRequest.decode(value),
    responseSerialize: (value: MarkAsReadotificationsResponse): Buffer =>
      Buffer.from(MarkAsReadotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MarkAsReadotificationsResponse =>
      MarkAsReadotificationsResponse.decode(value),
  },
} as const;

export interface NotificationServiceServer extends UntypedServiceImplementation {
  getNotifications: handleUnaryCall<GetNotificationsRequest, GetNotificationsResponse>;
  createNotification: handleUnaryCall<CreateNotificationRequest, CreateNotificationResponse>;
  deleteNotification: handleUnaryCall<DeleteNotificationsRequest, DeleteNotificationsResponse>;
  markAsReadNotification: handleUnaryCall<MarkAsReadNotificationRequest, MarkAsReadotificationResponse>;
  markAsReadNotifications: handleUnaryCall<MarkAsReadNotificationsRequest, MarkAsReadotificationsResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
