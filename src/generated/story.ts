// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: story.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { SUser } from "./shared_message";

export const protobufPackage = "story";

export interface Story {
  id: string;
  image: string;
  userId: string;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export interface StoryEnrich {
  id: string;
  image: string;
  userId: string;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
  user: SUser | undefined;
}

export interface CreateStoryRequest {
  image: string;
  userId: string;
}

export interface CreateStoryResponse {
  story: Story | undefined;
}

export interface GetAllStoriesRequest {
  firtId?: string | undefined;
}

export interface GetAllStoriesResponse {
  stories: Story[];
}

export interface GetAllStoriesResponseEnrich {
  stories: StoryEnrich[];
}

export interface GetStoryRequest {
  id: string;
}

export interface GetStoryResponse {
  story: Story | undefined;
}

export interface GetStoryResponseEnrich {
  story: StoryEnrich | undefined;
}

export interface DeleteStoryRequest {
  id: string;
  deletorId: string;
}

export interface DeleteStoryResponse {
  story: Story | undefined;
}

export const STORY_PACKAGE_NAME = "story";

function createBaseStory(): Story {
  return { id: "", image: "", userId: "", createdAt: "", updatedAt: "", deletedAt: "" };
}

export const Story: MessageFns<Story> = {
  encode(message: Story, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.image !== "") {
      writer.uint32(18).string(message.image);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(50).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Story {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseStoryEnrich(): StoryEnrich {
  return { id: "", image: "", userId: "", createdAt: "", updatedAt: "", deletedAt: "", user: undefined };
}

export const StoryEnrich: MessageFns<StoryEnrich> = {
  encode(message: StoryEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.image !== "") {
      writer.uint32(18).string(message.image);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(50).string(message.deletedAt);
    }
    if (message.user !== undefined) {
      SUser.encode(message.user, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoryEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoryEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.user = SUser.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateStoryRequest(): CreateStoryRequest {
  return { image: "", userId: "" };
}

export const CreateStoryRequest: MessageFns<CreateStoryRequest> = {
  encode(message: CreateStoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.image !== "") {
      writer.uint32(10).string(message.image);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateStoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateStoryResponse(): CreateStoryResponse {
  return { story: undefined };
}

export const CreateStoryResponse: MessageFns<CreateStoryResponse> = {
  encode(message: CreateStoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.story !== undefined) {
      Story.encode(message.story, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateStoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.story = Story.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetAllStoriesRequest(): GetAllStoriesRequest {
  return {};
}

export const GetAllStoriesRequest: MessageFns<GetAllStoriesRequest> = {
  encode(message: GetAllStoriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.firtId !== undefined) {
      writer.uint32(10).string(message.firtId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllStoriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllStoriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.firtId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetAllStoriesResponse(): GetAllStoriesResponse {
  return { stories: [] };
}

export const GetAllStoriesResponse: MessageFns<GetAllStoriesResponse> = {
  encode(message: GetAllStoriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stories) {
      Story.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllStoriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllStoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stories.push(Story.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetAllStoriesResponseEnrich(): GetAllStoriesResponseEnrich {
  return { stories: [] };
}

export const GetAllStoriesResponseEnrich: MessageFns<GetAllStoriesResponseEnrich> = {
  encode(message: GetAllStoriesResponseEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stories) {
      StoryEnrich.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAllStoriesResponseEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllStoriesResponseEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stories.push(StoryEnrich.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetStoryRequest(): GetStoryRequest {
  return { id: "" };
}

export const GetStoryRequest: MessageFns<GetStoryRequest> = {
  encode(message: GetStoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetStoryResponse(): GetStoryResponse {
  return { story: undefined };
}

export const GetStoryResponse: MessageFns<GetStoryResponse> = {
  encode(message: GetStoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.story !== undefined) {
      Story.encode(message.story, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.story = Story.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetStoryResponseEnrich(): GetStoryResponseEnrich {
  return { story: undefined };
}

export const GetStoryResponseEnrich: MessageFns<GetStoryResponseEnrich> = {
  encode(message: GetStoryResponseEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.story !== undefined) {
      StoryEnrich.encode(message.story, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStoryResponseEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStoryResponseEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.story = StoryEnrich.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteStoryRequest(): DeleteStoryRequest {
  return { id: "", deletorId: "" };
}

export const DeleteStoryRequest: MessageFns<DeleteStoryRequest> = {
  encode(message: DeleteStoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.deletorId !== "") {
      writer.uint32(18).string(message.deletorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deletorId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteStoryResponse(): DeleteStoryResponse {
  return { story: undefined };
}

export const DeleteStoryResponse: MessageFns<DeleteStoryResponse> = {
  encode(message: DeleteStoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.story !== undefined) {
      Story.encode(message.story, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteStoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteStoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.story = Story.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface StoryServiceClient {
  createStoryService(request: CreateStoryRequest): Observable<CreateStoryResponse>;

  getAllStoryService(request: GetAllStoriesRequest): Observable<GetAllStoriesResponse>;

  getStoryService(request: GetStoryRequest): Observable<GetStoryResponse>;

  deleteStoryService(request: DeleteStoryRequest): Observable<DeleteStoryResponse>;
}

export interface StoryServiceController {
  createStoryService(
    request: CreateStoryRequest,
  ): Promise<CreateStoryResponse> | Observable<CreateStoryResponse> | CreateStoryResponse;

  getAllStoryService(
    request: GetAllStoriesRequest,
  ): Promise<GetAllStoriesResponse> | Observable<GetAllStoriesResponse> | GetAllStoriesResponse;

  getStoryService(
    request: GetStoryRequest,
  ): Promise<GetStoryResponse> | Observable<GetStoryResponse> | GetStoryResponse;

  deleteStoryService(
    request: DeleteStoryRequest,
  ): Promise<DeleteStoryResponse> | Observable<DeleteStoryResponse> | DeleteStoryResponse;
}

export function StoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createStoryService", "getAllStoryService", "getStoryService", "deleteStoryService"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("StoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("StoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const STORY_SERVICE_NAME = "StoryService";

export type StoryServiceService = typeof StoryServiceService;
export const StoryServiceService = {
  createStoryService: {
    path: "/story.StoryService/CreateStoryService",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateStoryRequest): Buffer => Buffer.from(CreateStoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateStoryRequest => CreateStoryRequest.decode(value),
    responseSerialize: (value: CreateStoryResponse): Buffer => Buffer.from(CreateStoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateStoryResponse => CreateStoryResponse.decode(value),
  },
  getAllStoryService: {
    path: "/story.StoryService/GetAllStoryService",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAllStoriesRequest): Buffer => Buffer.from(GetAllStoriesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAllStoriesRequest => GetAllStoriesRequest.decode(value),
    responseSerialize: (value: GetAllStoriesResponse): Buffer =>
      Buffer.from(GetAllStoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAllStoriesResponse => GetAllStoriesResponse.decode(value),
  },
  getStoryService: {
    path: "/story.StoryService/GetStoryService",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetStoryRequest): Buffer => Buffer.from(GetStoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetStoryRequest => GetStoryRequest.decode(value),
    responseSerialize: (value: GetStoryResponse): Buffer => Buffer.from(GetStoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetStoryResponse => GetStoryResponse.decode(value),
  },
  deleteStoryService: {
    path: "/story.StoryService/DeleteStoryService",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteStoryRequest): Buffer => Buffer.from(DeleteStoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteStoryRequest => DeleteStoryRequest.decode(value),
    responseSerialize: (value: DeleteStoryResponse): Buffer => Buffer.from(DeleteStoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteStoryResponse => DeleteStoryResponse.decode(value),
  },
} as const;

export interface StoryServiceServer extends UntypedServiceImplementation {
  createStoryService: handleUnaryCall<CreateStoryRequest, CreateStoryResponse>;
  getAllStoryService: handleUnaryCall<GetAllStoriesRequest, GetAllStoriesResponse>;
  getStoryService: handleUnaryCall<GetStoryRequest, GetStoryResponse>;
  deleteStoryService: handleUnaryCall<DeleteStoryRequest, DeleteStoryResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
