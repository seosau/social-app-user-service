// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { ConversationType } from "./chat_enum";
import { SUser } from "./shared_message";

export const protobufPackage = "chat";

export interface Conversation {
  id: string;
  memberIds: string[];
  type: ConversationType;
  updatedAt: string;
  createdAt: string;
  deletedAt: string;
}

export interface ConversationEnrich {
  id: string;
  memberIds: string[];
  type: ConversationType;
  updatedAt: string;
  createdAt: string;
  deletedAt: string;
  members: SUser[];
}

export interface Message {
  id: string;
  senderId: string;
  conversationId: string;
  content: string;
  updatedAt: string;
  createdAt: string;
  deletedAt: string;
}

export interface CreateConversationRequest {
  memberIds: string[];
  type: ConversationType;
}

export interface CreateConversationResponse {
  id: string;
  memberIds: string[];
  type: ConversationType;
  updatedAt: string;
  createdAt: string;
  deletedAt: string;
}

export interface GetListConversationRequest {
  userId: string;
}

export interface GetListConversationResponse {
  conversations: GetConversationResponse[];
}

export interface GetListConversationResponseEnrich {
  conversations: GetConversationResponseEnrich[];
}

export interface GetConversationRequest {
  conversationId: string;
}

export interface GetConversationResponse {
  conversation: Conversation | undefined;
  messageList: Message[];
}

export interface GetConversationResponseEnrich {
  conversation: ConversationEnrich | undefined;
  messageList: Message[];
}

export interface SendMessageRequest {
  senderId: string;
  conversationId: string;
  content: string;
}

export interface SendMessageResponse {
  message: Message | undefined;
}

export const CHAT_PACKAGE_NAME = "chat";

function createBaseConversation(): Conversation {
  return { id: "", memberIds: [], type: 0, updatedAt: "", createdAt: "", deletedAt: "" };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.memberIds) {
      writer.uint32(18).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(82).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseConversationEnrich(): ConversationEnrich {
  return { id: "", memberIds: [], type: 0, updatedAt: "", createdAt: "", deletedAt: "", members: [] };
}

export const ConversationEnrich: MessageFns<ConversationEnrich> = {
  encode(message: ConversationEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.memberIds) {
      writer.uint32(18).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(82).string(message.deletedAt);
    }
    for (const v of message.members) {
      SUser.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConversationEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversationEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.members.push(SUser.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMessage(): Message {
  return { id: "", senderId: "", conversationId: "", content: "", updatedAt: "", createdAt: "", deletedAt: "" };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.senderId !== "") {
      writer.uint32(18).string(message.senderId);
    }
    if (message.conversationId !== "") {
      writer.uint32(26).string(message.conversationId);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(82).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateConversationRequest(): CreateConversationRequest {
  return { memberIds: [], type: 0 };
}

export const CreateConversationRequest: MessageFns<CreateConversationRequest> = {
  encode(message: CreateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.memberIds) {
      writer.uint32(18).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateConversationResponse(): CreateConversationResponse {
  return { id: "", memberIds: [], type: 0, updatedAt: "", createdAt: "", deletedAt: "" };
}

export const CreateConversationResponse: MessageFns<CreateConversationResponse> = {
  encode(message: CreateConversationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.memberIds) {
      writer.uint32(18).string(v!);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    if (message.createdAt !== "") {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(82).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetListConversationRequest(): GetListConversationRequest {
  return { userId: "" };
}

export const GetListConversationRequest: MessageFns<GetListConversationRequest> = {
  encode(message: GetListConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetListConversationResponse(): GetListConversationResponse {
  return { conversations: [] };
}

export const GetListConversationResponse: MessageFns<GetListConversationResponse> = {
  encode(message: GetListConversationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      GetConversationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListConversationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListConversationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversations.push(GetConversationResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetListConversationResponseEnrich(): GetListConversationResponseEnrich {
  return { conversations: [] };
}

export const GetListConversationResponseEnrich: MessageFns<GetListConversationResponseEnrich> = {
  encode(message: GetListConversationResponseEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      GetConversationResponseEnrich.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListConversationResponseEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListConversationResponseEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversations.push(GetConversationResponseEnrich.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetConversationRequest(): GetConversationRequest {
  return { conversationId: "" };
}

export const GetConversationRequest: MessageFns<GetConversationRequest> = {
  encode(message: GetConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversationId !== "") {
      writer.uint32(10).string(message.conversationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetConversationResponse(): GetConversationResponse {
  return { conversation: undefined, messageList: [] };
}

export const GetConversationResponse: MessageFns<GetConversationResponse> = {
  encode(message: GetConversationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== undefined) {
      Conversation.encode(message.conversation, writer.uint32(10).fork()).join();
    }
    for (const v of message.messageList) {
      Message.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversation = Conversation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageList.push(Message.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetConversationResponseEnrich(): GetConversationResponseEnrich {
  return { conversation: undefined, messageList: [] };
}

export const GetConversationResponseEnrich: MessageFns<GetConversationResponseEnrich> = {
  encode(message: GetConversationResponseEnrich, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== undefined) {
      ConversationEnrich.encode(message.conversation, writer.uint32(10).fork()).join();
    }
    for (const v of message.messageList) {
      Message.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetConversationResponseEnrich {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConversationResponseEnrich();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversation = ConversationEnrich.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageList.push(Message.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSendMessageRequest(): SendMessageRequest {
  return { senderId: "", conversationId: "", content: "" };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderId !== "") {
      writer.uint32(18).string(message.senderId);
    }
    if (message.conversationId !== "") {
      writer.uint32(26).string(message.conversationId);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSendMessageResponse(): SendMessageResponse {
  return { message: undefined };
}

export const SendMessageResponse: MessageFns<SendMessageResponse> = {
  encode(message: SendMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ChatServiceClient {
  getListConversation(request: GetListConversationRequest): Observable<GetListConversationResponse>;

  getConversation(request: GetConversationRequest): Observable<GetConversationResponse>;

  createConversation(request: CreateConversationRequest): Observable<CreateConversationResponse>;

  sendMessage(request: SendMessageRequest): Observable<SendMessageResponse>;
}

export interface ChatServiceController {
  getListConversation(
    request: GetListConversationRequest,
  ): Promise<GetListConversationResponse> | Observable<GetListConversationResponse> | GetListConversationResponse;

  getConversation(
    request: GetConversationRequest,
  ): Promise<GetConversationResponse> | Observable<GetConversationResponse> | GetConversationResponse;

  createConversation(
    request: CreateConversationRequest,
  ): Promise<CreateConversationResponse> | Observable<CreateConversationResponse> | CreateConversationResponse;

  sendMessage(
    request: SendMessageRequest,
  ): Promise<SendMessageResponse> | Observable<SendMessageResponse> | SendMessageResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getListConversation", "getConversation", "createConversation", "sendMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";

export type ChatServiceService = typeof ChatServiceService;
export const ChatServiceService = {
  getListConversation: {
    path: "/chat.ChatService/GetListConversation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetListConversationRequest): Buffer =>
      Buffer.from(GetListConversationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetListConversationRequest => GetListConversationRequest.decode(value),
    responseSerialize: (value: GetListConversationResponse): Buffer =>
      Buffer.from(GetListConversationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetListConversationResponse => GetListConversationResponse.decode(value),
  },
  getConversation: {
    path: "/chat.ChatService/GetConversation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetConversationRequest): Buffer =>
      Buffer.from(GetConversationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetConversationRequest => GetConversationRequest.decode(value),
    responseSerialize: (value: GetConversationResponse): Buffer =>
      Buffer.from(GetConversationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetConversationResponse => GetConversationResponse.decode(value),
  },
  createConversation: {
    path: "/chat.ChatService/CreateConversation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateConversationRequest): Buffer =>
      Buffer.from(CreateConversationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateConversationRequest => CreateConversationRequest.decode(value),
    responseSerialize: (value: CreateConversationResponse): Buffer =>
      Buffer.from(CreateConversationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateConversationResponse => CreateConversationResponse.decode(value),
  },
  sendMessage: {
    path: "/chat.ChatService/SendMessage",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendMessageRequest): Buffer => Buffer.from(SendMessageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SendMessageRequest => SendMessageRequest.decode(value),
    responseSerialize: (value: SendMessageResponse): Buffer => Buffer.from(SendMessageResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SendMessageResponse => SendMessageResponse.decode(value),
  },
} as const;

export interface ChatServiceServer extends UntypedServiceImplementation {
  getListConversation: handleUnaryCall<GetListConversationRequest, GetListConversationResponse>;
  getConversation: handleUnaryCall<GetConversationRequest, GetConversationResponse>;
  createConversation: handleUnaryCall<CreateConversationRequest, CreateConversationResponse>;
  sendMessage: handleUnaryCall<SendMessageRequest, SendMessageResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
