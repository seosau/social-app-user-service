// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: comment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "comment";

export interface Comment {
  id: string;
  postId: string;
  userId: string;
  parentId?: string | undefined;
  content: string;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
}

export interface GetCommentsRequest {
  postId: string;
}

export interface GetCommentsResponse {
  comments: Comment[];
}

export interface CreateCommentRequest {
  postId: string;
  userId: string;
  content: string;
  parentId?: string | undefined;
}

export interface CreateCommentResponse {
  comments: Comment | undefined;
}

export const COMMENT_PACKAGE_NAME = "comment";

function createBaseComment(): Comment {
  return { id: "", postId: "", userId: "", content: "", createdAt: "", updatedAt: "", deletedAt: "" };
}

export const Comment: MessageFns<Comment> = {
  encode(message: Comment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.postId !== "") {
      writer.uint32(18).string(message.postId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.parentId !== undefined) {
      writer.uint32(66).string(message.parentId);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(50).string(message.updatedAt);
    }
    if (message.deletedAt !== "") {
      writer.uint32(58).string(message.deletedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deletedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetCommentsRequest(): GetCommentsRequest {
  return { postId: "" };
}

export const GetCommentsRequest: MessageFns<GetCommentsRequest> = {
  encode(message: GetCommentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postId !== "") {
      writer.uint32(10).string(message.postId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetCommentsResponse(): GetCommentsResponse {
  return { comments: [] };
}

export const GetCommentsResponse: MessageFns<GetCommentsResponse> = {
  encode(message: GetCommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateCommentRequest(): CreateCommentRequest {
  return { postId: "", userId: "", content: "" };
}

export const CreateCommentRequest: MessageFns<CreateCommentRequest> = {
  encode(message: CreateCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.postId !== "") {
      writer.uint32(10).string(message.postId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.parentId !== undefined) {
      writer.uint32(34).string(message.parentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.postId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateCommentResponse(): CreateCommentResponse {
  return { comments: undefined };
}

export const CreateCommentResponse: MessageFns<CreateCommentResponse> = {
  encode(message: CreateCommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.comments !== undefined) {
      Comment.encode(message.comments, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.comments = Comment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface CommentServiceClient {
  getComments(request: GetCommentsRequest): Observable<GetCommentsResponse>;

  createComment(request: CreateCommentRequest): Observable<CreateCommentResponse>;
}

export interface CommentServiceController {
  getComments(
    request: GetCommentsRequest,
  ): Promise<GetCommentsResponse> | Observable<GetCommentsResponse> | GetCommentsResponse;

  createComment(
    request: CreateCommentRequest,
  ): Promise<CreateCommentResponse> | Observable<CreateCommentResponse> | CreateCommentResponse;
}

export function CommentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getComments", "createComment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CommentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CommentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMMENT_SERVICE_NAME = "CommentService";

export type CommentServiceService = typeof CommentServiceService;
export const CommentServiceService = {
  getComments: {
    path: "/comment.CommentService/GetComments",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCommentsRequest): Buffer => Buffer.from(GetCommentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetCommentsRequest => GetCommentsRequest.decode(value),
    responseSerialize: (value: GetCommentsResponse): Buffer => Buffer.from(GetCommentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetCommentsResponse => GetCommentsResponse.decode(value),
  },
  createComment: {
    path: "/comment.CommentService/CreateComment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCommentRequest): Buffer => Buffer.from(CreateCommentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateCommentRequest => CreateCommentRequest.decode(value),
    responseSerialize: (value: CreateCommentResponse): Buffer =>
      Buffer.from(CreateCommentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateCommentResponse => CreateCommentResponse.decode(value),
  },
} as const;

export interface CommentServiceServer extends UntypedServiceImplementation {
  getComments: handleUnaryCall<GetCommentsRequest, GetCommentsResponse>;
  createComment: handleUnaryCall<CreateCommentRequest, CreateCommentResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
